li 1111111 # Load all 1s into R1
move 1 0 # Move all 1s to R0
li 0000001 # Load 1 into R1
srl 0 1 # R1 is now 01111111
move 1 0 # Move 01111111 to R0
li 1111111 # Load all 1s into R1
xor 0 1 # R1 is now 10000000
move 1 0 # Move to R0
li 0001001 # Load 9 into R1
lw 1 1 # Load mem9 into R1 
and 0 1 # Get sign bit only 
move 1 2 # Move sign bit into R2
li 0010100 # Memory location 20 will hold Sign1
sw 1 2 # Move Sign1 into mem20
li 0001011 # Load 11 into R1
lw 1 1 # Load mem11 into R1 
and 0 1 # Get sign bit only 
move 1 2 # Move sign bit into R2
li 0010101 # Memory location 21 will hold Sign2
sw 1 2 # Move Sign2 into mem20
li 1111000 # Load exp mask into R1
move 1 0 # Move exp mask to R0
li 0000001 # Load 1 into R1
srl 0 1 # R1 is now 01111100
move 1 0 # Move 01111100 to R0
li 0001001 # Load 9 into R1
lw 1 1 # Load mem9 into R1 
and 0 1 # Get exp bits only 
move 1 2 # Move exp bits into R2
li 0010110 # Memory location 22 will hold Exp1
sw 1 2 # Move Exp1 into mem22
li 0001011 # Load 11 into R1
lw 1 1 # Load mem11 into R1 
and 0 1 # Get exp bits only 
move 1 2 # Move exp bits into R2
li 0010111 # Memory location 23 will hold Exp2
sw 1 2 # Move Exp2 into mem23
li 0000100 # This is the implicit leading 1
move 1 3 # Move implicit 1 to R3
li 0000011 # This is the mask for the first two (non-implicit) mantissa bits
move 1 0 # Mask in R0
li 0001001 # Load 9 into R1
lw 1 1 # load mem9 into R1
and 0 1 # Get first two (non-implicit) mantissa bits only
xor 1 3 # This is the first 3 mantissa bits
move 1 2 # Move first 3 mantissa bits to R2
li 0011000 # Memory location 24 will hold Mantissa1 [10:8]
sw 1 2 # Move Mantissa1 [10:8] into mem24
li 0001011 # Load 11 into R1
lw 1 1 # load mem11 into R1
and 0 1 # Get first two (non-implicit) mantissa bits only
xor 1 3 # This is the first 3 mantissa bits
move 1 2 # Move first 3 mantissa bits to R2
li 0011010 # Memory location 26 will hold Mantissa2 [10:8]
sw 1 2 # Move Mantissa2 [10:8] into mem26
li 0001000 # Load 8 into R1
lw 1 2 # Load mem8 into R2
li 0011001 # Memory location 25 will hold Mantissa1 [7:0] (for consistencies sake)
sw 1 2 # Move Mantissa1 [7:0] into mem25
li 0001010 # Load 10 into R1
lw 1 2 # Load mem10 into R2
li 0011011 # Memory location 27 will hold Mantissa2 [7:0] (for consistencies sake)
sw 1 2 # Move Mantissa2 [7:0] into mem27
li 0010110 # Getting Exp1 (mem22)
lw 1 2 # Load Exp1 to R2
li 0100000 # Memory location 32 will hold Exp3 (extra space for calculations)
sw 1 2 # Exp3 = Exp1
li 0010100 # Getting Sign1 (mem20)
lw 1 2 # Load Sign1 to R2
li 0100001 # Memory location 33 will hold Sign3 (extra space for calculations)
sw 1 2 # Sign3 = Sign1
li 0010110 # want to compare exp1 and exp2 so we load them into R2 and R3; Getting Exp1 (mem22)
lw 1 2 # Load Exp1 in R2
li 0010111 # Getting Exp2 (mem23)
lw 1 3 # Load Exp2 in R3
slt 3 2 # If Exp2 is less than Exp1, then R1 will be 1 (handle Exp2 < Exp1 case); otherwise R1 will be 0 (Exp1 <= Exp2)
beq 0101001 # 41; (Handle Exp1 <= Exp2)
li 1111111 # This means Exp1 > Exp2; Load all 1s into R1 to complement Exp2
xor 1 3 # R1 is complemented Exp2
move 1 3 # R3 is complemented Exp2
li 0000001 # Load 1 into R1
add 1 3 # R1 is -Exp2
move 1 3 # R3 is -Exp2
add 2 3 # R1 = Exp1 - Exp2
move 1 3 # R3 is Exp1 - Exp2
li 0011010 # Get Mantissa2[10:8] (mem26)
lw 1 1 # Load Mantissa2[10:8] into R1
srl 1 3 # Shift Mantissa2[10:8] the appropriate amount
move 1 2 # Move new Mantissa2[10:8] into R2
li 0011100 # Memory 28; we'll put the new Mantissa2[10:8] into mem28 temporarily
sw 1 2 # New Mantissa2[10:8] in mem28
li 0011011 # Get Mantissa2[7:0] (mem27)
lw 1 1 # Load Mantissa2[7:0] into R1
srl 1 3 # Shift Mantissa2[7:0] the appropriate amount
move 1 0 # Store this half of Mantissa2[7:0] into R0
li 1111111 # Load all 1s into R1 to complement (Exp1 - Exp2)
xor 1 3 # R1 is complemented (Exp1 - Exp2)
move 1 3 # R3 is complemented (Exp1 - Exp2)
li 0000001 # Load 1 into R1
add 1 3 # R1 is -(Exp1 - Exp2)
move 1 3 # R3 is -(Exp1 - Exp2)
li 0001000 Load R1 with 8
add 1 3 # R1 = 8 - (Exp1 - Exp2)
move 1 3 # R3 = 8 - (Exp1 - Exp2)
li 0011010 # Get Mantissa2[10:8] (mem26)
lw 1 1 # Load Mantissa2[10:8] into R1
sll 1 3 # Shift Mantissa2[10:8] the appropriate amount
move 1 2 # Move new part of Mantissa2[10:8] into R2
xor 0 2 # Combine parts of Mantissa2; this is Mantissa2[7:0]
move 1 0 # Move new Mantissa2[7:0] into R0 
li 0011011 # We write new Mantissa2[7:0] back into mem27
sw 1 0 # Store new Mantissa2[7:0] into mem27
li 0011100 # Load 28 into R1 to get mem28 
lw 1 0 # Load new Mantissa2[10:8] into R0
li 0011010 # Load 26 into R1 to put new Mantissa2[10:8] into mem26
sw 1 0 # Put new Mantissa2[10:8] into mem26
li 0000000 # Set R1 to 0 to branch
beq 0101011 # 43; (branch to the adding of mantissas)
neq 2 3 # BRANCH DESTINATION for Handle Exp1 <= Exp2; handle Exp1 = Exp2; if Exp1 != Exp2 then R1 = 1; otherwise R1 = 0
beq 0101001 # 41; (if they are equal then we just branch to add)
li 0100000 # Set Exp3 = Exp2; load address 32
sw 1 3 # Store Exp2 to Exp3
li 1111111 # This means Exp2 > Exp1; Load all 1s into R1 to complement Exp1; (handle Exp2 > Exp1)
xor 1 2 # R1 is complemented Exp1
move 1 2 # R2 is complemented Exp1
li 0000001 # Load 1 into R1
add 1 2 # R1 is -Exp1
move 1 2 # R2 is -Exp1
add 2 3 # R1 = Exp2 - Exp1
move 1 3 # R3 is Exp2 - Exp1
li 0011000 # Get Mantissa1[10:8] (mem24)
lw 1 1 # Load Mantissa1[10:8] into R1
srl 1 3 # Shift Mantissa1[10:8] the appropriate amount
move 1 2 # Move new Mantissa1[10:8] into R2
li 0011100 # Memory 28; we'll put the new Mantissa1[10:8] into mem28 temporarily
sw 1 2 # New Mantissa1[10:8] in mem28
li 0011001 # Get Mantissa1[7:0] (mem25)
lw 1 1 # Load Mantissa1[7:0] into R1
srl 1 3 # Shift Mantissa1[7:0] the appropriate amount
move 1 0 # Store this half of Mantissa1[7:0] into R0
li 1111111 # Load all 1s into R1 to complement (Exp2 - Exp1)
xor 1 3 # R1 is complemented (Exp2 - Exp1)
move 1 3 # R3 is complemented (Exp2 - Exp1)
li 0000001 # Load 1 into R1
add 1 3 # R1 is -(Exp2 - Exp1)
move 1 3 # R3 is -(Exp2 - Exp1)
li 0001000 Load R1 with 8
add 1 3 # R1 = 8 - (Exp2 - Exp1)
move 1 3 # R3 = 8 - (Exp2 - Exp1)
li 0011000 # Get Mantissa1[10:8] (mem24)
lw 1 1 # Load Mantissa1[10:8] into R1
sll 1 3 # Shift Mantissa1[10:8] the appropriate amount
move 1 2 # Move new part of Mantissa1[10:8] into R2
xor 0 2 # Combine parts of Mantissa1; this is Mantissa1[7:0]
move 1 0 # Move new Mantissa1[7:0] into R0 
li 0011001 # We write new Mantissa1[7:0] back into mem25
sw 1 0 # Store new Mantissa1[7:0] into mem25
li 0011100 # Load 28 into R1 to get mem28 
lw 1 0 # Load new Mantissa1[10:8] into R0
li 0011000 # Load 24 into R1 to put new Mantissa1[10:8] into mem24
sw 1 0 # Put new Mantissa1[10:8] into mem24; Don't need branch after this because it's just the next line
li 0011001 # BRANCH DESTINATION for handling the addition of mantissas; Get Mantissa1[7:0] from mem25
lw 1 2 # Load Mantissa1[7:0] into R2
li 0011011 # Get Mantissa2[7:0] from mem27
lw 1 3 # Load Mantissa2[7:0] into R3
over 2 3 # if R2 + R3 causes overflow, R1 = 1; else R1 = 0
beq 0010000 # 16; (no overflow)
add 2 3 # Means that there is overflow; R1 = R2 + R3
move 1 0 # Move temp Mantissa3[7:0] into R0
li 0011100 # Load 28 into R1 to write to mem28
sw 1 0 # Write temp Mantissa3[7:0] to mem28
li 0011000 # Get Mantissa1[10:8] from mem24
lw 1 2 # Load Mantissa1[10:8] into R2
li 0011010 # Get Mantissa2[10:8] from mem26
lw 1 3 # Load Mantissa2[10:8] into R3
li 0000001 # Load 1 into R1
add 1 2 # Add R2 + 1
add 1 3 # R1 = 1 + R2 + R3
move 1 0 # Move temp Mantissa3[11:8] to R0
li 0011101 # Load 29 into R1 to write to mem29
sw 1 0 # Write temp Mantissa3[11:8] to mem29
li 0000000 # Set R1 to 1 for branching
beq 0001100 # 12; (Check Mantissa3[11])
add 2 3 # BRANCH DESTINATION for no overflow; R1 = R2 + R3
move 1 0 # Move temp Mantissa3[7:0] into R0
li 0011100 # Load 28 into R1 to write to mem28
sw 1 0 # Write temp Mantissa3[7:0] to mem28
li 0011000 # Get Mantissa1[10:8] from mem24
lw 1 2 # Load Mantissa1[10:8] into R2
li 0011010 # Get Mantissa2[10:8] from mem26
lw 1 3 # Load Mantissa2[10:8] into R3
add 2 3 # R1 = R2 + R3; no overflow so no + 1
move 1 0 # Move temp Mantissa3[11:8] to R0
li 0011101 # Load 29 into R1 to write to mem29
sw 1 0 # Write temp Mantissa3[11:8] to mem29
li 0011101 # BRANCH DESTINATION for check Mantissa3[11]; Get Mantissa3[11:8] (mem29)
lw 1 0 # Get Mantissa3[11:8] (mem29) into R0
li 0000011 # Shift amount to get Mantissa3 isolated
srl 0 1 # R1 = Mantissa3[11]
beq 0011101 # 29; If R1 == 0, then we don't need to handle edge case
li 0100000 # This means we do need to handle edge case; get Exp3 (mem32)
lw 1 0 # We don't handle the edge case where Exp3 is 11111 and 1 is added; Load Exp3 to R0
li 0000001 # Load 1 to R1 to increment Exp3
add 0 1 # R1 = Exp3+1
move 1 0 # R0 = Exp3+1
li 0100000 # Put Exp3 back into mem32
sw 1 0 # Put Exp3 back into mem32
li 0011100 # Get temp Mantissa3[7:0]
lw 1 0 # Put temp Mantissa3[7:0] into R0
li 0000001 # Load 1 to R1 for shifting
srl 0 1 # R1 = R0 >> 1
move 1 3 # Hold last 7 bits of Mantissa3[7:0] in R3
li 0011101 # Load 29 into R1 to get temp Mantissa3[11:8]
lw 1 0 # Put temp Mantissa3[11:8] into R0
li 0000111 # Load 7 into R1 for shifting
sll 0 1 # R1 = R0 << 7
xor 1 3 # This is all of Mantissa3[7:0]
move 1 0 # Move Mantissa3[7:0] to R0
li 0100011 # 35, Put Mantissa3[7:0] into mem35
sw 1 0 # Put Mantissa3[7:0] into mem35
li 0011101 # Load 29 into R1 to get temp Mantissa3[11:8]
lw 1 0 # Put temp Mantissa3[11:8] into R0
li 0000001 # Load 1 into R1 for shifting
srl 0 1 # R1 = R0 >> 1
move 1 0 # This is correct Mantissa3[10:8], move into R0
li 0100010 # 34, Put Mantissa3[10:8] into mem34
sw 1 0 # Put Mantissa3[10:8] into mem34
li 0000000 # Set R1 to 0 for branching
beq 0001000 # 8; (branch to storing to mem)
li 0011100 # BRANCH DESTINATION for no Mantissa3[11] edge case; Move things into mem35 and mem 34 for parity
lw 1 0 # Load Mantissa3[7:0] into R0
li 0100011 # Put Mantissa[7:0] into mem35
sw 1 0 # Put Mantissa[7:0] into mem35
li 0011101 # Load 29 into R1 to get Mantissa3[10:8]
lw 1 0 # Put Mantissa3[10:8] into R0
li 0100010 # 34, Put Mantissa3[10:8] into mem34
sw 1 0 # Put Mantissa3[10:8] into mem34
li 0100010 # BRANCH DESTINATION for Mantissa3[11] edge case; Get Mantissa3[10:8]
lw 1 0 # Load Mantissa3[10:8] to R0
li 0000011 # Load mask into R1
and 0 1 # Mantissa3[9:8] 
move 1 0 # Mantissa3[9:8] in R0
li 0100000 # Get Exp3 from mem32
lw 1 1 # Load Exp3 into R1
xor 0 1 # Combine Mantissa3[9:8] with Exp3
move 1 0 # Move this to R0
li 0100001 # Get Sign3 from mem33
lw 1 1 # Load Sign3 into R1
xor 0 1 # Combine Mantissa3[9:8], Exp3, and Sign3
move 1 0 # Move Mantissa3[9:8], Exp3, and Sign3 to R0
li 0001101 # Mem13 value 
sw 1 0 # MEM13 is stored!!!
li 0100011 # Load Mantissa3[7:0]
lw 1 0 # Load Mantissa3[7:0] into R0
li 0001100 # Mem12 value
sw 1 0 # MEM12 is stored!!!
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
done