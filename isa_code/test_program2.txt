li 0000101 # Load 5 into R1 to get mem5
lw 1 2 # Load mem5 into R2
li 1111111 # Load all 1s into R1
move 1 0 # Move all 1s to R0
li 0000001 # Load 1 into R1
srl 0 1 # R1 is now 01111111
move 1 0 # Move 01111111 to R0
li 1111111 # Load all 1s into R1
xor 0 1 # R1 is now 10000000
and 1 2 # R1 = Sign
move 1 0 # R0 = Sign
li 0100000 # Put Sign into mem32
sw 1 0 # Sign is stored in mem32
li 1111100 # Load mask into R1
move 1 3 # Move mask into R3
li 0000001 # Load 1 into R1 for shifting
move 1 0 # Move 1 into R0
sll 3 0 # Remove first bit of mask
srl 1 0 # Mask is now 01111100 
and 1 2 # Get Exp from MSW
move 1 0 # R0 = Exp
li 0100001 # Put Exp into mem33
sw 1 0 # Exp is stored in mem33
li 0000010 # Put 2 into R1 for shifting
srl 0 1 # Shift Exp right by 2
move 1 3 # Move Exp >> 2 into R3
li 0010111 # Load 23 into R1
slt 1 3 # R1 = 0 when Exp >> 2 < 23; this branches to the case where exp <= 22
beq 0100101 # 37; (exp <= 22)
li 1111111 # Load all 1s into R1
move 1 0 # Move all 1s to R0
li 0000001 # Load 1 into R1
srl 0 1 # R1 is now 01111111
move 1 0 # Move 01111111 into R0
li 0000111 # Load 7 into R1
sw 1 0 # Store 01111111 into mem7 (max case; temp)
li 1111111 # Load all 1s into R1
move 1 0 # Move all 1s to R0
li 0000110 # Load 6 into R1
sw 1 0 Store 11111111 into mem6 (max case; temp)
li 0100000 # Load 32 into R1
lw 1 1 # Load Sign into R1
beq 0001110 # 14; (Finished with max case)
li 1111111 # Handle negative max cases; XOR mask
move 1 0 # Move XOR mask into R0
li 0000111 # Load 7 into R1; get mem7
lw 1 1 # Load mem7 into R1
xor 0 1 # Flip mem7
move 1 2 # Move flipped mem7 into R2
li 0000111 # Mem 7
sw 1 2 # Store flipped mem7
li 0000110 # Load 6 into R1; get mem6
lw 1 1 # Load mem6 into R1
xor 0 1 # Flip mem6
move 1 2 # Move flipped mem6 into R2
li 0000110 # Mem 6
sw 1 2 # Store flipped mem6
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
done
li 0000110 # max case is handled, now handle min cases; Load 7 into R1
slt 3 1 # if exp >= 7, branch (R1 = 0) -> R1 = 6 < exp; if 6 < exp, R1 = 1; R1 = 0 if 6 >= exp
beq 0001111 # 15; (exp >= 7)
li 0000000 # Handle 0s cases; Load 0 into R1
move 1 0 # R0 is 0
li 0000111 # Address 7
sw 1 0 # Store 0s into mem7
li 0000110 # Address 6
sw 1 0 # Store 0s into mem6
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
done
li 0000101 # BRANCH DESTINATION FOR HARD CASES; Load 5 into R1
lw 1 0 # Load mem5 into R0
li 0000011 # Load mask into R1
and 0 1 # Mask mantissa bits 
move 1 0 # Move into R0
li 0000100 # Add implicit 1
xor 0 1 # Add implicit 1 
move 1 0 # Move into R0
li 0000111 # Load 7 into R1
sw 1 0 # Store mantissa + implicit 1 into mem7
li 0000100 # Load 4 into R1
lw 1 0 # Load mem4 into R0
li 0000110 # Load 6 into R1
sw 1 0 # Store mem4 into mem6
li 0010001 # EXP IS BETWEEN 22 AND 7 (INCLUSIVE); Load 17 into R1
slt 3 1 # If exp < 17, R1 = 1. If exp >= 17, R1 = 0; branch
beq 0101000 # 40; handle exp == 18
li 1111111 # Mask into R1
xor 1 3 # Flip the bits of exp
move 1 2 # Move this into R2
li 0000001 # 1 into R1 for adding
add 1 2 # R1 = -exp
move 1 2 # R2 = -exp
li 0010001 # Load 17 into R1
add 1 2 # This is the right shift amount
move 1 2 # Right shift amount in R2
li 0000111 # Load 7 into R1
lw 1 0 # Load mem7 into R0
srl 0 1 # Shift mem7 right by shift amount 
move 1 0 # Shifted mem7 in R0
li 0100010 # Store temp shifted mem7 in mem34
sw 1 0 # temp shifted mem7 in mem34
li 0000110 # Load 6 into R1
lw 1 0 # Load mem6 into R0
srl 0 2 # Shift mem6 right by shift amount
move 1 0 # move shifted mem6 to R0
li 0000111 # Load 7 into R1
lw 1 3 # Load mem7 into R3
li 1111111 # Load XOR mask into R1
xor 1 2 # Complement shift amount 
move 1 2 # Store in R2
li 0000001 # Load 1 into R1 for add
add 1 2 # R1 = - shift amount
move 1 2 # R2 = - shift amount
li 0001000 # Load 8 into R1
add 1 2 # 8 0 shift amount
sll 3 1 # Shift mem7 left 8 - shift amount
xor 0 1 # Combine shifted mem6 and shifted part of mem7 
move 1 0 # Move that into R0
li 0000110 # Load 6 into R1
sw 1 0 # Load updated mem6 into mem6
li 0100010 # Load 34 into R0 
lw 1 0 # Load temp shifted mem7 into R0
li 0000111 # Load 7 into R1
sw 1 0 # Store shifted mem7 into mem7
li 0000000 # Load 0 for branch
beq 0011000 # 24; (handle negative) 
li 0000110 # DESTINATION FOR exp == 18; sll by 1; Load 6 into R1
lw 1 0 # Load mem6 into R0
li 0000001 # Load 1 into R1 for shifting
sll 0 1 # Shift mem6 left by 1 
move 1 0 # Shifted mem6 in R0
li 0100010 # Store temp shifted mem6 in mem34
sw 1 0 # temp shifted mem6 in mem34
li 0000111 # Load 7 into R1
lw 1 0 # Load mem7 into R0
li 0000001 # Load 1 into R1 for shifting
sll 0 1 # Shift mem7 left by 1
move 1 0 # move shifted mem7 to R0
li 0000110 # Load 6 into R1
lw 1 3 # Load mem6 into R3
li 0000111 # Load 7 into R1
srl 3 1 # Shift mem6 right 7
xor 0 1 # Combine 1 shifted mem7 and MSW of mem6 
move 1 0 # Move that into R0
li 0000111 # Load 7 into R1
sw 1 0 # Load updated mem7 into mem7
li 0100010 # Load 34 into R0 
lw 1 0 # Load temp shifted mem6 into R0
li 0000110 # Load 6 into R1
sw 1 0 # Store shifted mem6 into mem6; next line is the handle negative case
li 0100000 # Handle the negative case; Get mem32
lw 1 0 # Store Sign in R0
li 0000111 # Load 7 into R1 for shifting
srl 0 1 # R1 = R0 >> 7
move 1 0 # R0 = sign bit (0 or 1)
li 0000000 # Load 0 into R1
neq 0 1 # if sign bit (R1) != 0, R1 = 1; if sign bit == 0, then R1 = 0 (branch to the positive case)
beq 0100000 # 32; Done!
li 1111111 # Mask 
move 1 0 # Move mask to R0
li 0000110 # mem6
lw 1 2 # mem6 into R2
xor 0 2 # R1 = flipped R1
move 1 2 # move flipped into R2
li 0000001 # Load 0 into R1
move 1 3 # R3 (carry out) defaults to 1
li 0000001 # Load 1 into R1 to add
add 1 2 # Add 1 to flipped R2
move 1 0 # sum in R0
li 0000110 # mem6
sw 1 0 # Store mem6
li 0000111 # Load 7 into R1 for shift
srl 0 1 # Shift sum right by 7
move 1 0 # Move sum into R0
li 0000111 # Load 7 into R1 for shift
srl 2 1 Shift R2 right by 7
neq 0 1 # Check if the sign bit changed
beq 0000010 # 2; Branch past the carry out change
li 0000001 # Load 1 into R1
move 1 3 # R3 (carry out)
li 1111111 # Mask 
move 1 0 # Move mask to R0
li 0000111 # mem7
lw 1 2 # mem7 into R2
xor 0 2 # R1 = flipped R1
move 1 2 # move flipped into R2
add 1 3 # add possible carryout to flipped
move 1 2 # move to R2
li 0000111 mem7 
sw 1 2 # Store mem7 
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
li 0000000 # NOP
done